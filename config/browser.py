#!/usr/bin/env python3
"""
üåê Browser Configuration Module
Detecta e configura automaticamente o WebDriver para Chrome/Chromium
Compat√≠vel com Linux e Windows
"""

import os
import sys
import platform
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

class BrowserDetector:
    """Classe para detectar e configurar navegadores automaticamente"""
    
    def __init__(self):
        self.sistema = platform.system().lower()
        self.navegador_encontrado = None
        self.caminho_navegador = None
        self.driver_path = None
        
    def detectar_navegador(self):
        """Detecta qual navegador est√° dispon√≠vel no sistema"""
        print("üîç Detectando navegador dispon√≠vel...", flush=True)
        
        # Lista de poss√≠veis execut√°veis por sistema
        if self.sistema == "linux":
            navegadores = [
                ("Google Chrome", ["google-chrome", "google-chrome-stable", "chrome"]),
                ("Chromium", ["chromium", "chromium-browser", "chromium-bin"])
            ]
        elif self.sistema == "windows":
            navegadores = [
                ("Google Chrome", ["chrome.exe", "chrome"]),
                ("Chromium", ["chromium.exe", "chromium"])
            ]
        else:
            # macOS ou outros
            navegadores = [
                ("Google Chrome", ["google-chrome", "chrome"]),
                ("Chromium", ["chromium", "chromium-browser"])
            ]
        
        # Procurar por navegadores instalados
        for nome, executaveis in navegadores:
            for executavel in executaveis:
                caminho = shutil.which(executavel)
                if caminho:
                    self.navegador_encontrado = nome
                    self.caminho_navegador = caminho
                    print(f"‚úÖ {nome} encontrado em: {caminho}", flush=True)
                    return True
        
        # Se n√£o encontrou, tentar caminhos padr√£o do Windows
        if self.sistema == "windows":
            caminhos_windows = [
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
                r"C:\Users\%USERNAME%\AppData\Local\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files\Chromium\Application\chromium.exe",
                r"C:\Program Files (x86)\Chromium\Application\chromium.exe"
            ]
            
            for caminho in caminhos_windows:
                caminho_expandido = os.path.expandvars(caminho)
                if os.path.exists(caminho_expandido):
                    if "chrome" in caminho.lower():
                        self.navegador_encontrado = "Google Chrome"
                    else:
                        self.navegador_encontrado = "Chromium"
                    self.caminho_navegador = caminho_expandido
                    print(f"‚úÖ {self.navegador_encontrado} encontrado em: {caminho_expandido}", flush=True)
                    return True
        
        print("‚ùå Nenhum navegador compat√≠vel encontrado!", flush=True)
        return False
    
    def configurar_opcoes(self, headless=True, zoom=100):
        """Configura as op√ß√µes do Chrome/Chromium"""
        options = Options()
        
        # Op√ß√µes b√°sicas
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-plugins")
        options.add_argument("--disable-images")
        options.add_argument("--disable-javascript")
        options.add_argument("--window-size=1920,1080")
        
        # Configurar zoom
        if zoom != 100:
            zoom_factor = zoom / 100
            options.add_argument(f"--force-device-scale-factor={zoom_factor}")
        
        # Modo headless
        if headless:
            options.add_argument("--headless")
        
        # Configurar caminho do navegador se encontrado
        if self.caminho_navegador:
            options.binary_location = self.caminho_navegador
        
        # Configura√ß√µes espec√≠ficas do sistema
        if self.sistema == "linux":
            options.add_argument("--disable-software-rasterizer")
            options.add_argument("--disable-background-timer-throttling")
            options.add_argument("--disable-backgrounding-occluded-windows")
            options.add_argument("--disable-renderer-backgrounding")
        
        elif self.sistema == "windows":
            options.add_argument("--disable-background-timer-throttling")
            options.add_argument("--disable-backgrounding-occluded-windows")
            options.add_argument("--disable-renderer-backgrounding")
        
        return options
    
    def detectar_chromedriver(self):
        """Detecta o ChromeDriver dispon√≠vel"""
        print("üîç Procurando ChromeDriver...", flush=True)
        
        # Tentar encontrar chromedriver no PATH
        driver_executaveis = ["chromedriver", "chromedriver.exe"]
        
        for executavel in driver_executaveis:
            caminho = shutil.which(executavel)
            if caminho:
                self.driver_path = caminho
                print(f"‚úÖ ChromeDriver encontrado em: {caminho}", flush=True)
                return True
        
        # Caminhos padr√£o para Windows
        if self.sistema == "windows":
            caminhos_windows = [
                r"C:\chromedriver\chromedriver.exe",
                r"C:\WebDrivers\chromedriver.exe",
                r"C:\Program Files\chromedriver\chromedriver.exe",
                r"C:\Program Files (x86)\chromedriver\chromedriver.exe"
            ]
            
            for caminho in caminhos_windows:
                if os.path.exists(caminho):
                    self.driver_path = caminho
                    print(f"‚úÖ ChromeDriver encontrado em: {caminho}", flush=True)
                    return True
        
        print("‚ö†Ô∏è ChromeDriver n√£o encontrado no PATH", flush=True)
        print("üí° Tentando usar ChromeDriver padr√£o do Selenium...", flush=True)
        return False
    
    def criar_driver(self, headless=True, zoom=100):
        """Cria e retorna uma inst√¢ncia do WebDriver configurada"""
        print("üöÄ Configurando WebDriver...", flush=True)
        
        # Detectar navegador
        if not self.detectar_navegador():
            raise Exception("‚ùå Nenhum navegador compat√≠vel encontrado. Instale Google Chrome ou Chromium.")
        
        # Configurar op√ß√µes
        options = self.configurar_opcoes(headless=headless, zoom=zoom)
        
        # Detectar ChromeDriver
        self.detectar_chromedriver()
        
        try:
            # Tentar criar driver com caminho espec√≠fico
            if self.driver_path:
                service = Service(self.driver_path)
                driver = webdriver.Chrome(service=service, options=options)
            else:
                # Usar driver padr√£o do Selenium
                driver = webdriver.Chrome(options=options)
            
            print(f"‚úÖ WebDriver criado com sucesso!", flush=True)
            print(f"üì± Navegador: {self.navegador_encontrado}", flush=True)
            print(f"üñ•Ô∏è Sistema: {self.sistema.title()}", flush=True)
            print(f"üëÅÔ∏è Modo: {'Headless' if headless else 'Visual'}", flush=True)
            print(f"üîç Zoom: {zoom}%", flush=True)
            
            return driver
            
        except Exception as e:
            print(f"‚ùå Erro ao criar WebDriver: {str(e)}", flush=True)
            
            # Tentar novamente sem caminho espec√≠fico
            if self.driver_path:
                print("üîÑ Tentando sem caminho espec√≠fico do driver...", flush=True)
                try:
                    driver = webdriver.Chrome(options=options)
                    print("‚úÖ WebDriver criado com sucesso (m√©todo alternativo)!", flush=True)
                    return driver
                except Exception as e2:
                    print(f"‚ùå Erro no m√©todo alternativo: {str(e2)}", flush=True)
            
            raise Exception(f"‚ùå Falha ao criar WebDriver: {str(e)}")
    
    def info_sistema(self):
        """Retorna informa√ß√µes sobre o sistema"""
        info = {
            'sistema': self.sistema,
            'navegador': self.navegador_encontrado,
            'caminho_navegador': self.caminho_navegador,
            'driver_path': self.driver_path,
            'python_version': sys.version,
            'platform': platform.platform()
        }
        return info

# Fun√ß√µes de conveni√™ncia
def criar_driver_automatico(headless=True, zoom=100):
    """Cria um driver automaticamente detectando o navegador"""
    detector = BrowserDetector()
    return detector.criar_driver(headless=headless, zoom=zoom)

def testar_configuracao():
    """Testa a configura√ß√£o do navegador"""
    print("üß™ TESTANDO CONFIGURA√á√ÉO DO NAVEGADOR")
    print("=" * 50)
    
    detector = BrowserDetector()
    
    # Mostrar informa√ß√µes do sistema
    print(f"üñ•Ô∏è Sistema Operacional: {detector.sistema.title()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üåê Plataforma: {platform.platform()}")
    
    try:
        # Tentar criar driver
        driver = detector.criar_driver(headless=True, zoom=100)
        
        # Testar navega√ß√£o
        print("\nüîç Testando navega√ß√£o...", flush=True)
        driver.get("https://www.google.com")
        
        # Verificar se a p√°gina carregou
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        titulo = driver.title
        print(f"‚úÖ P√°gina carregada: {titulo}", flush=True)
        
        # Fechar driver
        driver.quit()
        print("‚úÖ Teste conclu√≠do com sucesso!", flush=True)
        
        # Mostrar informa√ß√µes finais
        info = detector.info_sistema()
        print(f"\nüìã CONFIGURA√á√ÉO FINAL:")
        print(f"  ‚Ä¢ Navegador: {info['navegador']}")
        print(f"  ‚Ä¢ Caminho: {info['caminho_navegador']}")
        print(f"  ‚Ä¢ Driver: {info['driver_path'] or 'Padr√£o do Selenium'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}", flush=True)
        return False

if __name__ == "__main__":
    # Executar teste se chamado diretamente
    testar_configuracao() 